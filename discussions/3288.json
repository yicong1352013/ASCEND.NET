[
  {
    "Id": "10411",
    "ThreadId": "3288",
    "Html": "\r\nHello,<br />I'm trying to subclass the GradientCaption control to set some custom values for properties (colors, etc.) in order to use the same 'custom' component across the whole application. <br />In this way, if I want to change the colors of all the captions in my app I can do it rapidly by changing the base class properties.<br />I created a derived class and set the custom properties I needed in the constructor, for example:<br /><br />public class ImpCaption : GradientCaption<br />  {<br />    public ImpCaption()<br />    {<br />      this.BorderColor = new Ascend.BorderColor(System.Drawing.Color.Gray);<br />      this.ForeColor = System.Drawing.Color.Black;<br />      this.GradientHighColor = System.Drawing.Color.WhiteSmoke;<br />      this.GradientLowColor = System.Drawing.Color.LightGray;<br />      this.GradientMode = System.Drawing.Drawing2D.LinearGradientMode.Horizontal;<br />      this.Location = new System.Drawing.Point(683, 352);<br />      this.Name = \"gradientCaption1\";<br />      this.Size = new System.Drawing.Size(84, 20);<br />      this.TabIndex = 8;<br />      this.Text = \"00.000.000,00\";<br />      this.TextAlign = System.Drawing.ContentAlignment.MiddleRight;<br />    }<br />}<br /><br />Unfortunately when I put the custom component in a form, using the visual editor, the code generator automatically sets all the properties (included the ones I have 'overridden') this way:<br /><br />// <br />// lbl<br />// <br />this.lbl.BorderColor = new Ascend.BorderColor(System.Drawing.Color.Gray);<br />this.lbl.ForeColor = System.Drawing.Color.Black;<br />this.lbl.GradientHighColor = System.Drawing.Color.WhiteSmoke;<br />this.lbl.GradientLowColor = System.Drawing.Color.LightGray;<br />this.lbl.GradientMode = System.Drawing.Drawing2D.LinearGradientMode.Horizontal;<br />this.lbl.Location = new System.Drawing.Point(506, 352);<br />this.lbl.Name = \"lbl\";<br />this.lbl.Size = new System.Drawing.Size(89, 20);<br />this.lbl.TabIndex = 11;<br />this.lbl.Text = \"impCaption4\";<br />this.lbl.TextAlign = System.Drawing.ContentAlignment.MiddleRight;<br /><br />This is not the behaviour I expected, because this way, if I change my subclass, the other forms don't get updated. I expected to not find settings for BorderColor, ForeColor, etc. that I customized.<br />I suppose this has to do with the DefaultValueAttribute that is set for these properties, and even trying to add a ShouldSerialize.. method that returns always false in my subclass doesn't help.<br />To my understanding it's better to set dafault values in constructors, that should prevent generation of unwanted code.<br />Anyone has any idea?<br />Thanks,<br />Frank<br />",
    "PostedDate": "2007-01-04T01:00:51.48-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]